load! "std.clq"

macro empty_string! do mem end
empty_string! "" new(String)! !

macro TT_EOF!   do 0            end
macro TT_INT!   do TT_EOF!  1 + end
macro TT_PLUS!  do TT_INT!  1 + end
macro TT_PUTD!  do TT_PLUS! 1 + end
macro TT_IF!    do TT_PUTD! 1 + end
macro TT_DO!    do TT_IF!   1 + end
macro TT_ELSE!  do TT_DO!   1 + end
macro TT_END!   do TT_ELSE! 1 + end

# struct Token {
#   uint8_t type;
#   struct String lexeme;
# };
macro sizeof(Token)! do 1 sizeof(String)! + end
macro Token.type! do 0 + end
macro Token.lexeme! do 1 + end

macro new(Token)! do
  # buf type lexeme
  2over <-> Token.type! <-> ^ <->
  2over <-> Token.lexeme! String.copy()! <-> ! !
end

macro Token.copy()! do
  # src dst
  over Token.type! v over Token.type! <-> ^
  over Token.lexeme! over Token.lexeme! String.copy()! !
  <-> !
end

macro fd-write!   do out-fd! v 2over write!   ! ! ! end
macro fd-writeln! do out-fd! v 2over writeln! ! ! ! end
macro fd-putd!    do out-fd! v  over fputd        ! end

macro statbuf! do empty_string! sizeof(String)! + end
macro filebuf! do statbuf!      sizeof(stat)!   + end

macro open-file()! do
  # path

  # Open file for reading
  AT_FDCWD! # dirmode
  <->       # pathname
  O_RDONLY! # flags
  sys_openat! syscall3

  if _ 0 < do
    "TODO: write an error for not being able to open the file!" eprintln!
    101 sys_exit! syscall3
  end

  # Get file info
  if
    _        # fd
    statbuf! # buf
  sys_fstat! syscall2 0 < do
    "TODO: write an error for not being able to get file information!" eprintln!
    101 sys_exit! syscall3
  end

  # Memory map the file's content into `filebuf!`
  0                          over # addr
  statbuf! stat.st_size! v64 <->  # lengthint
  PROT_READ!                 <->  # prot
  MAP_PRIVATE!                    # flag
  <->                             # fd
  0                               # offset
  sys_mmap! syscall6

  if _ 0 < do
    "TODO: write an error for not being able to map file!" eprintln!
    101 sys_exit! syscall3
  end

  filebuf! <-> statbuf! stat.st_size! v64 new(String)! !

  # Close file
  sys_close! syscall1 !
end

macro line!    do filebuf!      sizeof(String)! + end
macro lexeme!  do line!         sizeof(String)! + end
macro tok!     do lexeme!       sizeof(String)! + end
macro tmp-str! do tok!          sizeof(Token)!  + end

macro update-lexeme()! do
  # str
  line! lexeme! ' ' String.until()!
  if line! String.len! v64 0 == do
    if _ String.len! v64 0 == do _ line! String.copy()! !
    else _ line! 10 String.until()! end
  end !
end

macro is-int()! do
  # str
  tmp-str! String.copy()!
  2 # contain int

  # Skip `-`s
  while over
    if _ String.len! v64 0 != do
      String.addr! v64 v(char)! '-' ==
    else ! 0 end
  do
    over String.addr! _ v64 1 + ^64
    over String.len!  _ v64 1 - ^64
  end

  # Check for integers
  while
    over String.len! v64 0 !=
    over _ 2 ==
           1 == |
  & do
    ! _
    String.addr! v64 v(char)!
    _ '9' 1 + <
    <-> '0' 1 - <-> < &

    over String.addr! _ v64 1 + ^64
    over String.len!  _ v64 1 - ^64
  end

  <-> ! 1 ==
end

macro next-tok()! do
  # str
  if
    _ String.len! v64 0 ==
    line! String.len! v64 0 ==
  & do tok! TT_EOF! empty_string! new(Token)! !
  else
    _ update-lexeme()!

    while
      _ String.len! v64 0 !=
      lexeme! String.len! v64 0 ==
    & do _ update-lexeme()! end

    tok!
    if lexeme! is-int()! do TT_INT!
    elif lexeme! "+" String.streq()! do TT_PLUS!
    elif lexeme! "putd" String.streq()! do TT_PUTD!
    elif lexeme! "if" String.streq()! do TT_IF!
    elif lexeme! "do" String.streq()! do TT_DO!
    elif lexeme! "else" String.streq()! do TT_ELSE!
    elif lexeme! "end" String.streq()! do TT_END!
    else
      "TODO: write an error for unknown token!" eprintln!
      101 sys_exit! syscall3
    end
    lexeme! new(Token)! ! !
  end
end

# struct Block {
#   struct Token token;
#   uint64_t jmp;
# };
macro sizeof(Block)! do sizeof(Token)! 8 + end
macro Block.token! do 0 + end
macro Block.jmp! do sizeof(Token)! + end

macro BLOCK_MAX_DEPTH! do 1024 end

macro out-fd!          do tmp-str! sizeof(String)!                       + end

macro block-stack!     do out-fd! 1                                      + end
macro block-stack-len! do block-stack! sizeof(Block)! BLOCK_MAX_DEPTH! * + end

macro block-push()! do
  # token jmp
  if BLOCK_MAX_DEPTH! block-stack-len! v64 < do
    "TODO: write an error too many nested blocks!" eprintln!
    101 sys_exit! syscall3
  end

  block-stack-len! _ v64 1 + ^64
  block-last()!

  over over Block.jmp! <-> ^64 <-> !
  over over Block.token! Token.copy()! ! ! !
end

macro block-last()! do
  block-stack! block-stack-len! v64 1 - sizeof(Block)! * +
end

macro block-pop()! do
  block-last()!
  block-stack-len! _ v64 1 - ^64
end

macro jmp-tracker! do block-stack-len! 8 + end

macro compile-to-arm64-asm()! do
  ".text" fd-writeln!

  "putd:"                          fd-writeln!
  "  stp x29, x30, [x28, -64]!"    fd-writeln!
  "  mov w7, 0"                    fd-writeln!
  "  mov x29, x28"                 fd-writeln!
  "  tbz x0, #63, .L2"             fd-writeln!
  "  neg x0, x0"                   fd-writeln!
  "  mov w7, 1"                    fd-writeln!
  ".L2:"                           fd-writeln!
  "  mov x6, -3689348814741910324" fd-writeln!
  "  add x1, x28, 16"              fd-writeln!
  "  mov x2, 0"                    fd-writeln!
  "  movk x6, 0xcccd, lsl 0"       fd-writeln!
  ".L3:"                           fd-writeln!
  "  umulh x4, x0, x6"             fd-writeln!
  "  sub x5, x1, x2"               fd-writeln!
  "  add x2, x2, 1"                fd-writeln!
  "  lsr x4, x4, 3"                fd-writeln!
  "  add x3, x4, x4, lsl 2"        fd-writeln!
  "  sub x3, x0, x3, lsl 1"        fd-writeln!
  "  mov x0, x4"                   fd-writeln!
  "  add w3, w3, 48"               fd-writeln!
  "  strb w3, [x5, 47]"            fd-writeln!
  "  cbnz x4, .L3"                 fd-writeln!
  "  cbz w7, .L4"                  fd-writeln!
  "  sub x0, x1, x2"               fd-writeln!
  "  add x2, x2, 1"                fd-writeln!
  "  mov w3, 45"                   fd-writeln!
  "  strb w3, [x0, 47]"            fd-writeln!
  ".L4:"                           fd-writeln!
  "  sub x1, x1, x2"               fd-writeln!
  "  mov x0, x20"                  fd-writeln!
  "  add x1, x1, 48"               fd-writeln!
  "  mov x8, 64"                   fd-writeln!
  "  svc 0"                        fd-writeln!
  "  ldp x29, x30, [x28], 64"      fd-writeln!
  "  ret"                          fd-writeln!
  ""                               fd-writeln!

  ".global _start" fd-writeln!
  "_start:" fd-writeln!
  "  mov x28, sp" fd-writeln!

  filebuf! next-tok()!
  while tok! Token.type! v TT_EOF! != do
    tok! Token.type! v
    if _ TT_INT! == do
      "  // <-- int -->" fd-writeln!
      "  mov x0, " fd-write! tok! Token.lexeme! v(String)! fd-writeln!
      "  sub sp, x28, #8" fd-writeln!
      "  str x0, [x28, #-8]!" fd-writeln!
    elif _ TT_PLUS! == do
      "  // <-- plus -->" fd-writeln!
      "  ldr x0, [x28], #8" fd-writeln!
      "  ldr x1, [x28], #8" fd-writeln!
      "  add x0, x0, x1" fd-writeln!
      "  sub sp, x28, #8" fd-writeln!
      "  str x0, [x28, #-8]!" fd-writeln!
    elif _ TT_PUTD! == do
      "  // <-- putd -->" fd-writeln!
      "  ldr x0, [x28], #8" fd-writeln!
      "  mov x20, #1" fd-writeln!
      "  bl putd" fd-writeln!
    elif _ TT_IF! == do
      "  // <-- if -->" fd-writeln!

      jmp-tracker! _ v64 1 + ^64
      tok! jmp-tracker! v64 block-push()!
    elif _ TT_DO! == do
      "  // <-- do -->" fd-writeln!

      if block-stack-len! 0 == do
        "TODO: write an error for a lone `do`!" eprintln!
        101 sys_exit! syscall3
      end

      "  ldr x0, [x28], #8" fd-writeln!
      "  cmp x0, 1" fd-writeln!
      "  b.ne jmp_" fd-write! block-last()! Block.jmp! v64 fd-putd! "" fd-writeln!
    elif _ TT_ELSE! == do
      "  // <-- else -->" fd-writeln!

      if block-stack-len! 0 == do
        "TODO: write an error for a lone `else`!" eprintln!
        101 sys_exit! syscall3
      end
      block-pop()!

      _ Block.token! Token.type! v
      if _ TT_IF! == do !
        # Jump to end if `else` was reached
        "  b jmp_" fd-write! jmp-tracker! v64 1 + fd-putd! "" fd-writeln!
        # Otherwise we jump to this label if `if`'s condition was falsy
        "jmp_" fd-write! Block.jmp! v64 fd-putd! ":" fd-writeln!
      else !
        "TODO: write an error for an incompatible `else`" eprintln!
        101 sys_exit! syscall3
      end

      jmp-tracker! _ v64 1 + ^64
      tok! jmp-tracker! v64 block-push()!
    elif _ TT_END! == do
      "  // <-- end -->" fd-writeln!

      if block-stack-len! 0 == do
        "TODO: write an error for a lone `end`!" eprintln!
        101 sys_exit! syscall3
      end
      block-pop()!

      _ Block.token! Token.type! v
      # End for ifs and elses doesn't really do anything special
      if _ TT_IF! == do !
      elif _ TT_ELSE! == do !
      else !
        "Reached unreachable in `compile-to-arm64-asm()!` `end`" eprintln!
        101 sys_exit! syscall3
      end

      "jmp_" fd-write! Block.jmp! v64 fd-putd! ":" fd-writeln!
    else
      "Reached unreachable in `compile-to-arm64-asm()!`" eprintln!
      101 sys_exit! syscall3
    end

    filebuf! next-tok()!
  end

  "  // <-- exit -->" fd-writeln!
  "  mov x8, 93" fd-writeln!
  "  mov x0, 0" fd-writeln!
  "  svc 0" fd-writeln!
end

macro usage()! do
  "[INFO]: Usage: cleoqua [OPTIONS] <file-path>.clq" println!
  "[INFO]: OPTIONS:" println!
  "[INFO]:   --help,         -h: Prints this help message." println!
end

macro file-path! do jmp-tracker! 8 + end

macro main! do
  1 while _ argc < do
    tmp-str! over nth_arg! strlen! new(String)!

    if tmp-str! "-" String.startswith()! do
      tmp-str! String.addr! _ v64 1 + ^64
      tmp-str! String.len! _ v64 1 - ^64
      if tmp-str! "-" String.startswith()! do
        tmp-str! String.addr! _ v64 1 + ^64
        tmp-str! String.len! _ v64 1 - ^64
      end

      if
        tmp-str! "help" String.streq()!
        tmp-str! "h" String.streq()!
      | do
        usage()!
        0 sys_exit! syscall1
      else
        "TODO: write an error for unknown option!" eprintln!
        101 sys_exit! syscall3
      end
    elif file-path! String.len! v64 0 == do
      tmp-str! file-path! String.copy()! !
    else
      "TODO: write an error for unknown arg!" eprintln!
      101 sys_exit! syscall3
    end
    1 +
  end

  if file-path! String.len! v64 0 == do
    "TODO: write an error for no given file!" eprintln!
    101 sys_exit! syscall3
  end

  file-path! String.addr! v64 open-file()!
  out-fd! 1 ^
  compile-to-arm64-asm()!
end

main!

