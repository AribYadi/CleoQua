load! "std.clq"

macro empty_string! do mem end
empty_string! "" new(String)! !
macro sizeof(strbuf)! do 1024 end
macro strbuf! do empty_string! sizeof(String)! + end

macro TT_EOF!     do 0               end
macro TT_SKIP!    do TT_EOF!     1 + end
macro TT_INT!     do TT_SKIP!    1 + end
macro TT_STR!     do TT_INT!     1 + end
macro TT_PLUS!    do TT_STR!     1 + end
macro TT_MINUS!   do TT_PLUS!    1 + end
macro TT_LT!      do TT_MINUS!   1 + end
macro TT_EQEQ!    do TT_LT!      1 + end
macro TT_BANGEQ!  do TT_EQEQ!    1 + end
macro TT_DUP!     do TT_BANGEQ!  1 + end
macro TT_BITOR!   do TT_DUP!     1 + end
macro TT_BITAND!  do TT_BITOR!   1 + end
macro TT_OVER!    do TT_BITAND!  1 + end
macro TT_2OVER!   do TT_OVER!    1 + end
macro TT_SWAP!    do TT_2OVER!   1 + end
macro TT_MEM!     do TT_SWAP!    1 + end
macro TT_READ!    do TT_MEM!     1 + end
macro TT_WRITE!   do TT_READ!    1 + end
macro TT_READ64!  do TT_WRITE!   1 + end
macro TT_WRITE64! do TT_READ64!  1 + end
macro TT_SYSCALL! do TT_WRITE64! 1 + end
macro TT_PUTD!    do TT_SYSCALL! 1 + end
macro TT_IF!      do TT_PUTD!    1 + end
macro TT_DO!      do TT_IF!      1 + end
macro TT_WHILE!   do TT_DO!      1 + end
macro TT_ELSE!    do TT_WHILE!   1 + end
macro TT_END!     do TT_ELSE!    1 + end
macro TT_MACRO!   do TT_END!     1 + end
macro TT_MACRONM! do TT_MACRO!   1 + end
macro TT_LOAD!    do TT_MACRONM! 1 + end

# struct Token {
#   uint8_t type;
#   struct String lexeme;
# };
macro sizeof(Token)! do 1 sizeof(String)! + end
macro Token.type! do 0 + end
macro Token.lexeme! do 1 + end

macro new(Token)! do
  # buf type lexeme
  2over <-> Token.type! <-> ^ <->
  2over <-> Token.lexeme! String.copy()! <-> ! !
end

macro Token.copy()! do
  # src dst
  over Token.type! v over Token.type! <-> ^
  over Token.lexeme! over Token.lexeme! String.copy()! !
  <-> !
end

macro fd-write!   do out-fd! v64 2over write!   ! ! ! end
macro fd-writeln! do out-fd! v64 2over writeln! ! ! ! end
macro fd-putd!    do out-fd! v64  over fputd        ! end

macro statbuf! do strbuf!       sizeof(strbuf)! + end
macro filebuf! do statbuf!      sizeof(stat)!   + end

macro open-file()! do
  # path

  # Open file for reading
  AT_FDCWD! # dirmode
  <->       # pathname
  O_RDONLY! # flags
  sys_openat! syscall3

  if _ 0 < do
    "TODO: write an error for not being able to open the file!" eprintln!
    101 sys_exit! syscall1
  end

  # Get file info
  if
    _        # fd
    statbuf! # buf
  sys_fstat! syscall2 0 < do
    "TODO: write an error for not being able to get file information!" eprintln!
    101 sys_exit! syscall1
  end

  # Memory map the file's content into `filebuf!`
  0                          over # addr
  statbuf! stat.st_size! v64 <->  # lenlthint
  PROT_READ!                 <->  # prot
  MAP_PRIVATE!                    # flag
  <->                             # fd
  0                               # offset
  sys_mmap! syscall6

  if _ 0 < do
    "TODO: write an error for not being able to map file!" eprintln!
    101 sys_exit! syscall1
  end

  filebuf! <-> statbuf! stat.st_size! v64 new(String)! !

  # Close file
  sys_close! syscall1 !
end

macro line!    do filebuf!      sizeof(String)! + end
macro lexeme!  do line!         sizeof(String)! + end
macro tok!     do lexeme!       sizeof(String)! + end
macro tmp-str! do tok!          sizeof(Token)!  + end

macro update-lexeme()! do
  # str
  if line! String.len! v64 0 == do
    if _ String.len! v64 0 == do _ line! String.copy()! !
    else _ line! 10 String.until()! end
  end !
  while line! String.addr! v64 v(char)! 9 == do
    line! lexeme! 9 String.until()!
  end
  line! lexeme! ' ' String.until()!
end

macro is-int()! do
  # str
  tmp-str! String.copy()!
  2 # contain int

  # Skip `-`s
  while over
    if _ String.len! v64 0 != do
      String.addr! v64 v(char)! '-' ==
    else ! 0 end
  do
    over String.addr! _ v64 1 + ^64
    over String.len!  _ v64 1 - ^64
  end

  # Check for integers
  while
    over String.len! v64 0 !=
    over _ 2 ==
           1 == |
  & do
    ! _
    String.addr! v64 v(char)!
    _ '9' 1 + <
    <-> '0' 1 - <-> < &

    over String.addr! _ v64 1 + ^64
    over String.len!  _ v64 1 - ^64
  end

  <-> ! 1 ==
end

macro load-count! do tmp-str! sizeof(String)! + end

macro reload-last-inp()! do
  # last-str last-len curr-str
  if load-count! v64 0 == do
    ! TT_EOF!
  else
    2over new(String)! ! ! !
    load-count! _ v64 1 - ^64
    TT_SKIP!
  end
end

macro next-tok()! do
  # str
  if
    _ String.len! v64 0 ==
    line! String.len! v64 0 ==
  & do
    reload-last-inp()! tok! <-> empty_string! new(Token)! !
  else
    _ update-lexeme()!

    while
      _ String.len! v64 0 !=
      lexeme! String.len! v64 0 ==
    & do _ update-lexeme()! end

    tok!
    if lexeme! "#" String.startswith()! do
      line! String.len! 0 ^64
      TT_SKIP!
    elif lexeme! is-int()! do TT_INT!
    elif lexeme! "\"" 1 - String.startswith()! do
      lexeme! String.addr! v64 1 + # addr
      if lexeme! "\"" 1 - String.endswith()! 0 == do
        line! lexeme! '"' String.until()!
        lexeme! String.len! _ v64 1 + ^64
      end
      if lexeme! "\"" 1 - String.endswith()! 0 == do
        "TODO: write an error for unclosed string!" eprintln!
        lexeme! v(String)! println!
      end
      lexeme! String.addr! v64 over - lexeme! String.len! v64 1 - + # len
      lexeme! 2over new(String)! ! ! !
      TT_STR!
    elif lexeme! "+" String.streq()! do TT_PLUS!
    elif lexeme! "-" String.streq()! do TT_MINUS!
    elif lexeme! "<" String.streq()! do TT_LT!
    elif lexeme! "==" String.streq()! do TT_EQEQ!
    elif lexeme! "!=" String.streq()! do TT_BANGEQ!
    elif lexeme! "|" String.streq()! do TT_BITOR!
    elif lexeme! "&" String.streq()! do TT_BITAND!
    elif lexeme! "_" String.streq()! do TT_DUP!
    elif lexeme! "over" String.streq()! do TT_OVER!
    elif lexeme! "2over" String.streq()! do TT_2OVER!
    elif lexeme! "<->" String.streq()! do TT_SWAP!
    elif lexeme! "mem" String.streq()! do TT_MEM!
    elif lexeme! "v" String.streq()! do TT_READ!
    elif lexeme! "^" String.streq()! do TT_WRITE!
    elif lexeme! "v64" String.streq()! do TT_READ64!
    elif lexeme! "^64" String.streq()! do TT_WRITE64!
    elif
      if
        lexeme! "syscall" String.startswith()!
        lexeme! String.len! v64 8 ==
      & do
        lexeme! String.addr! v64 7 + v(char)!
        '0' 1 - over <
        <-> '6' 1 + < &
      else 0 end
    do TT_SYSCALL!
    elif lexeme! "putd" String.streq()! do TT_PUTD!
    elif lexeme! "if" String.streq()! do TT_IF!
    elif lexeme! "do" String.streq()! do TT_DO!
    elif lexeme! "while" String.streq()! do TT_WHILE!
    elif lexeme! "else" String.streq()! do TT_ELSE!
    elif lexeme! "end" String.streq()! do TT_END!
    elif lexeme! "macro" String.streq()! do TT_MACRO!
    elif lexeme! "load!" String.streq()! do TT_LOAD!
    elif lexeme! "!" String.endswith()! do TT_MACRONM!
    elif lexeme! String.len! v64 0 == do TT_SKIP!
    else
      "TODO: write an error for unknown token! `" eprint! lexeme! v(String)! eprint! "`" eprintln!
      101 sys_exit! syscall1
    end
    lexeme! new(Token)! ! !
  end !
end

# struct Block {
#   struct Token token;
#   uint64_t jmp;
# };
macro sizeof(Block)! do sizeof(Token)! 8 + end
macro Block.token! do 0 + end
macro Block.jmp! do sizeof(Token)! + end

macro BLOCK_MAX_DEPTH! do 1024 end

macro out-fd!          do load-count! 8                                  + end

macro block-stack!     do out-fd! 8                                      + end
macro block-stack-len! do block-stack! sizeof(Block)! BLOCK_MAX_DEPTH! * + end

macro block-push()! do
  # token jmp
  if BLOCK_MAX_DEPTH! block-stack-len! v64 == do
    "TODO: write an error too many nested blocks!" eprintln!
    101 sys_exit! syscall1
  end

  block-stack-len! _ v64 1 + ^64
  block-last()!

  over over Block.jmp! <-> ^64 <-> !
  over over Block.token! Token.copy()! ! ! !
end

macro block-last()! do
  block-stack! block-stack-len! v64 1 - sizeof(Block)! * +
end

macro block-pop()! do
  block-last()!
  block-stack-len! _ v64 1 - ^64
end

macro jmp-tracker! do block-stack-len! 8 + end

macro MEM_CAP! do 480000 end
macro STR_CAP! do 4096 end

macro strs-count! do jmp-tracker! 8 + end
macro strs! do strs-count! 8 + end

macro LOAD_CAP! do 1024 end
macro loaded-count! do strs! STR_CAP! sizeof(String)! * + end
macro loaded-files! do loaded-count! 8 + end

macro MACROS_CAP! do 4096 end
macro macros-count! do loaded-files! LOAD_CAP! sizeof(String)! * + end
macro macros! do macros-count! 8 + end

macro macros-find()! do
  # name
  0 0 while over macros-count! v64 1 + != over 0 == & do
    if 2over macros! <-> sizeof(Token)! * + Token.lexeme! <-> v(String)! String.startswith()! do
      ! 1
    else
      <-> 1 + <->
    end
  end !
  macros! <-> sizeof(Token)! * +
  <-> !
end

macro open-load-file()! do
  # path

  load-dirs-count! v64
  # Open load dir
  AT_FDCWD!                # dirmode
  "." !                    # pathname
  O_RDONLY! O_DIRECTORY! | # flags
  sys_openat! syscall3

  if _ 0 < do
    "TODO: write an error for not being able to open load dir!" eprintln!
    101 sys_exit! syscall1
  end

  # Open file for reading
  2over !   # dirmode
  over <->  # pathname
  O_RDONLY! # flags
  sys_openat! syscall3

  if _ 0 < dirname! strlen()! <-> ! 0 != & do ! !
    # Open load dir
    AT_FDCWD!                # dirmode
    dirname!                 # pathname
    O_RDONLY! O_DIRECTORY! | # flags
    sys_openat! syscall3

    if _ 0 < do
      "TODO: write an error for not being able to open load dir!" eprintln!
      101 sys_exit! syscall1
    end

    # Open file for reading
    2over !   # dirmode
    over <->  # pathname
    O_RDONLY! # flags
    sys_openat! syscall3
  end

  while
    2over ! 0 <-> <
    over 0 <
  & do ! !
    1 -

    # Open load dir
    load-dirs! over 8 * + v64 nth_arg!
    AT_FDCWD!                # dirmode
    <->                      # pathname
    O_RDONLY! O_DIRECTORY! | # flags
    sys_openat! syscall3

    if _ 0 < do
      "TODO: write an error for not being able to open load dir!" eprintln!
      101 sys_exit! syscall1
    end

    # Open file for reading
    2over !   # dirmode
    over <->  # pathname
    O_RDONLY! # flags
    sys_openat! syscall3
  end

  if _ 0 < do
    "TODO: write an error for not being able to open the file!" eprintln!
    101 sys_exit! syscall1
  end

  # Get file info
  if
    _        # fd
    statbuf! # buf
  sys_fstat! syscall2 0 < do
    "TODO: write an error for not being able to get file information!" eprintln!
    101 sys_exit! syscall1
  end

  # Memory map the file's content into `filebuf!`
  0                          over # addr
  statbuf! stat.st_size! v64 <->  # lengthint
  PROT_READ!                 <->  # prot
  MAP_PRIVATE!                    # flag
  <->                             # fd
  0                               # offset
  sys_mmap! syscall6

  if _ 0 < do
    "TODO: write an error for not being able to map file!" eprintln!
    101 sys_exit! syscall1
  end

  filebuf! <-> statbuf! stat.st_size! v64 new(String)! !

  # Close file
  sys_close! syscall1 !

  # Close dir
  sys_close! syscall1 !

  ! !
end

macro compile-tok-to-arm64-asm()! do
  # tt
  if _ TT_SKIP! == do !
  elif _ TT_INT! == do !
    "  // <-- int -->" fd-writeln!
    "  ldr x0, =" fd-write! tok! Token.lexeme! v(String)! fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_STR! == do !
    "  // <-- str -->" fd-writeln!

    if STR_CAP! strs-count! v64 == do
      "TODO: write an error for strs overflow!" eprintln!
      101 sys_exit! syscall1
    end

    "  sub sp, x28, #16" fd-writeln!
    "  ldr x0, =str_" fd-write! strs-count! v64 fd-putd! "" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
    "  mov x0, " fd-write! tok! Token.lexeme! String.len! v64 fd-putd! "" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!

    tok! Token.lexeme! strs! strs-count! v64 sizeof(String)! * + String.copy()! !
    strs-count! _ v64 1 + ^64
  elif _ TT_PLUS! == do !
    "  // <-- plus -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  add x0, x0, x1" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_MINUS! == do !
    "  // <-- minus -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  sub x0, x0, x1" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_LT! == do !
    "  // <-- less than -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  cmp x0, x1" fd-writeln!
    "  cset x0, lt" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_EQEQ! == do !
    "  // <-- equal -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  cmp x0, x1" fd-writeln!
    "  cset x0, eq" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_BANGEQ! == do !
    "  // <-- not equal -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  cmp x0, x1" fd-writeln!
    "  cset x0, ne" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_BITOR! == do !
    "  // <-- bit or -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  orr x0, x0, x1" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_BITAND! == do !
    "  // <-- bit and -->" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  and x0, x0, x1" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_DUP! == do !
    "  // <-- dup -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  sub sp, x28, #16" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_OVER! == do !
    "  // <-- over -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  sub sp, x28, #24" fd-writeln!
    "  str x1, [x28, #-8]!" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
    "  str x1, [x28, #-8]!" fd-writeln!
  elif _ TT_2OVER! == do !
    "  // <-- 2over -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  ldr x2, [x28], #8" fd-writeln!
    "  sub sp, x28, #40" fd-writeln!
    "  str x2, [x28, #-8]!" fd-writeln!
    "  str x1, [x28, #-8]!" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
    "  str x2, [x28, #-8]!" fd-writeln!
    "  str x1, [x28, #-8]!" fd-writeln!
  elif _ TT_SWAP! == do !
    "  // <-- swap -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
    "  str x1, [x28, #-8]!" fd-writeln!
  elif _ TT_MEM! == do !
    "  // <-- mem -->" fd-writeln!
    "  ldr x0, =MEM" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_READ! == do !
    "  // <-- read -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldrb w0, [x0]" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str w0, [x28, #-8]!" fd-writeln!
  elif _ TT_WRITE! == do !
    "  // <-- write -->" fd-writeln!
    "  ldr w0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  strb w0, [x1]" fd-writeln!
  elif _ TT_READ64! == do !
    "  // <-- read64 -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x0, [x0]" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_WRITE64! == do !
    "  // <-- write64 -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  ldr x1, [x28], #8" fd-writeln!
    "  str x0, [x1]" fd-writeln!
  elif _ TT_SYSCALL! == do !
    "  // <-- syscall -->" fd-writeln!

    lexeme! String.addr! v64 7 + v(char)! '0' - # syscall argc

    "  ldr x8, [x28], #8" fd-writeln!
    while _ 0 != do
      1 -
      "  ldr x" fd-write! _ fd-putd! ", [x28], #8" fd-writeln!
    end ! !

    "  svc 0" fd-writeln!
    "  sub sp, x28, #8" fd-writeln!
    "  str x0, [x28, #-8]!" fd-writeln!
  elif _ TT_PUTD! == do !
    "  // <-- putd -->" fd-writeln!
    "  ldr x0, [x28], #8" fd-writeln!
    "  mov x20, #1" fd-writeln!
    "  bl putd" fd-writeln!
  elif _ TT_IF! == do !
    "  // <-- if -->" fd-writeln!

    jmp-tracker! _ v64 1 + ^64
    tok! jmp-tracker! v64 block-push()!
  elif _ TT_DO! == do !
    "  // <-- do -->" fd-writeln!

    if block-stack-len! v64 0 == do !
      "TODO: write an error for a lone `do`!" eprintln!
      101 sys_exit! syscall1
    end

    "  ldr x0, [x28], #8" fd-writeln!
    "  cmp x0, 1" fd-writeln!
    "  b.ne jmp_" fd-write! block-last()! Block.jmp! v64 fd-putd! "" fd-writeln!
  elif _ TT_WHILE! == do !
    "  // <-- while -->" fd-writeln!

    # We create a new label for `end` to jump to
    jmp-tracker! _ v64 1 + ^64
    "jmp_" fd-write! jmp-tracker! v64 fd-putd! ":" fd-writeln!
    jmp-tracker! _ v64 1 + ^64

    tok! jmp-tracker! v64 block-push()!
  elif _ TT_ELSE! == do !
    "  // <-- else -->" fd-writeln!

    if block-stack-len! 0 == do !
      "TODO: write an error for a lone `else`!" eprintln!
      101 sys_exit! syscall1
    end
    block-pop()!

    _ Block.token! Token.type! v
    if _ TT_IF! == do !
      # Jump to end if `else` was reached
      "  b jmp_" fd-write! jmp-tracker! v64 1 + fd-putd! "" fd-writeln!
      # Otherwise we jump to this label if `if`'s condition was falsy
      "jmp_" fd-write! Block.jmp! v64 fd-putd! ":" fd-writeln!
    else !
      "TODO: write an error for an incompatible `else`" eprintln!
      101 sys_exit! syscall1
    end

    jmp-tracker! _ v64 1 + ^64
    tok! jmp-tracker! v64 block-push()!
  elif _ TT_END! == do !
    "  // <-- end -->" fd-writeln!

    if block-stack-len! 0 == do !
      "TODO: write an error for a lone `end`!" eprintln!
      101 sys_exit! syscall1
    end
    block-pop()!

    _ Block.token! Token.type! v
    # End for ifs and elses doesn't really do anything special
    if _ TT_IF! == do !
    elif _ TT_ELSE! == do !
    elif _ TT_WHILE! == do !
      "  b jmp_" fd-write! jmp-tracker! v64 1 - fd-putd! "" fd-writeln!
    else !
      _ Block.token! Token.type! putd
      "Reached unreachable in `compile-to-arm64-asm()!` `end`" eprintln!
      101 sys_exit! syscall1
    end

    "jmp_" fd-write! Block.jmp! v64 fd-putd! ":" fd-writeln!
  elif _ TT_MACRO! == do !
    if MACROS_CAP! macros-count! v64 == do
      "TODO: write an error for macro overflow" eprintln!
      101 sys_exit! syscall1
    end

    macros! macros-count! v64 sizeof(Token)! * +
    tok! <-> Token.copy()!

    filebuf! next-tok()!
    if tok! Token.type! v TT_MACRONM! != do
      "TODO: write an error for macro name!" eprintln!
      101 sys_exit! syscall1
    end

    Token.lexeme!
    tok! Token.lexeme! String.addr! v64 # addr

    filebuf! next-tok()!
    if tok! Token.type! v TT_DO! != do
      "TODO: write an error for expected `do` after macro name!" eprintln!
      101 sys_exit! syscall1
    end

    1 # block depth
    while _ 0 != do
      filebuf! next-tok()!
      tok! Token.type! v
      if _ TT_DO! == do ! 1 +
      elif _ TT_END! == do ! 1 -
      else !
      end
    end !

    tok! Token.lexeme! String.addr! v64 over - # len
    new(String)! !
    macros-count! _ v64 1 + ^64
  elif _ TT_MACRONM! == do !
    filebuf! v(String)! <-> ! line! String.addr! v64 <-> line! String.len! v64 +
    line! String.len! 0 ^64
    load-count! _ v64 1 + ^64

    tok! Token.lexeme! macros-find()! Token.lexeme!
    filebuf!
    String.copy()! !

    # Skips the macro name and `do` toks
    filebuf! next-tok()!
    filebuf! next-tok()!
  elif _ TT_LOAD! == do !
    if LOAD_CAP! loaded-count! v64 == do
      "TODO: write an error for load overflow" eprintln!
      101 sys_exit! syscall1
    end

    filebuf! next-tok()!
    if tok! Token.type! v TT_STR! != do
      "TODO: write an error for load value!" eprintln!
      101 sys_exit! syscall1
    end

    if sizeof(strbuf)! tok! Token.lexeme! String.len! v64 < do
      "TODO: write an error for too big load path!" eprintln!
      101 sys_exit! syscall1
    end

    if
      1
      loaded-count! v64
      while 0 over < do
        1 - <->
        loaded-files! 2over ! sizeof(String)! * +
        tok! Token.lexeme! v(String)!
        String.streq()! 0 ==
        & <->
      end !
    do
      filebuf! v(String)!
      load-count! _ v64 1 + ^64

      tok! Token.lexeme! strbuf! String.strcpy()!
      strbuf! open-load-file()!

      tok! Token.lexeme! loaded-files! loaded-count! v64 sizeof(String)! * + String.copy()! !
      loaded-count! _ v64 1 + ^64
    end
  else !
    "Reached unreachable in `compile-tok-to-arm64-asm()!`" eprintln!
    101 sys_exit! syscall1
  end
end

macro compile-to-arm64-asm()! do
  ".bss" fd-writeln!

  ".lcomm MEM, " fd-write! MEM_CAP! fd-putd! "" fd-writeln!

  ".text" fd-writeln!

  "putd:"                          fd-writeln!
  "  stp x29, x30, [x28, -64]!"    fd-writeln!
  "  mov w7, 0"                    fd-writeln!
  "  mov x29, x28"                 fd-writeln!
  "  tbz x0, #63, .L2"             fd-writeln!
  "  neg x0, x0"                   fd-writeln!
  "  mov w7, 1"                    fd-writeln!
  ".L2:"                           fd-writeln!
  "  mov x6, -3689348814741910324" fd-writeln!
  "  add x1, x28, 16"              fd-writeln!
  "  mov x2, 0"                    fd-writeln!
  "  movk x6, 0xcccd, lsl 0"       fd-writeln!
  ".L3:"                           fd-writeln!
  "  umulh x4, x0, x6"             fd-writeln!
  "  sub x5, x1, x2"               fd-writeln!
  "  add x2, x2, 1"                fd-writeln!
  "  lsr x4, x4, 3"                fd-writeln!
  "  add x3, x4, x4, lsl 2"        fd-writeln!
  "  sub x3, x0, x3, lsl 1"        fd-writeln!
  "  mov x0, x4"                   fd-writeln!
  "  add w3, w3, 48"               fd-writeln!
  "  strb w3, [x5, 47]"            fd-writeln!
  "  cbnz x4, .L3"                 fd-writeln!
  "  cbz w7, .L4"                  fd-writeln!
  "  sub x0, x1, x2"               fd-writeln!
  "  add x2, x2, 1"                fd-writeln!
  "  mov w3, 45"                   fd-writeln!
  "  strb w3, [x0, 47]"            fd-writeln!
  ".L4:"                           fd-writeln!
  "  sub x1, x1, x2"               fd-writeln!
  "  mov x0, x20"                  fd-writeln!
  "  add x1, x1, 48"               fd-writeln!
  "  mov x8, 64"                   fd-writeln!
  "  svc 0"                        fd-writeln!
  "  ldp x29, x30, [x28], 64"      fd-writeln!
  "  ret"                          fd-writeln!
  ""                               fd-writeln!

  ".global _start" fd-writeln!
  "_start:" fd-writeln!
  "  mov x28, sp" fd-writeln!

  filebuf! next-tok()!
  while tok! Token.type! v TT_EOF! != do
    tok! Token.type! v
    compile-tok-to-arm64-asm()!
    filebuf! next-tok()!
  end

  "  // <-- exit -->" fd-writeln!
  "  mov x8, 93" fd-writeln!
  "  mov x0, 0" fd-writeln!
  "  svc 0" fd-writeln!
  "" fd-writeln!

  ".data" fd-writeln!
  while 0 strs-count! v64 < do
    strs-count! _ v64 1 - ^64
    strs! strs-count! v64 sizeof(String)! * +
    "  str_" fd-write! strs-count! v64 fd-putd! ": .ascii \"" 1 - fd-write! v(String)! fd-write! "\\0\"" 2 - fd-writeln!
  end
end

macro usage()! do
  "[INFO]: Usage: cleoqua [OPTIONS] <file-path>.clq" println!
  "[INFO]: OPTIONS:" println!
  "[INFO]:   --help,         -h: Prints this help message." println!
  "[INFO]:   --load-dir,     -L: Adds a directory to load files from." fd-writeln!
end

macro LOAD_DIRS_CAP! do 256 end
macro load-dirs! do macros! MACROS_CAP! sizeof(Token)! * + end
macro load-dirs-count! do load-dirs! LOAD_DIRS_CAP! 8 * + end

macro file-path! do load-dirs-count! 8 + end
macro dirname! do file-path! sizeof(String)! + end
macro out-path! do dirname! sizeof(strbuf)! + end

macro get-out-path()! do
  file-path! String.len! v64 3 -
  out-path! over + 'S' ^
  while 0 over < do
    out-path! over 1 - + # dst
    over 1 - file-path! String.addr! v64 + v(char)! # src
    ^
    1 -
  end !
end

macro get-dirname()! do
  # Using `empty_string` since i dont want to introduce `tmp-str2`
  file-path! empty_string! String.copy()! !
  while 0 empty_string! String.len! v64 < do
    empty_string! tmp-str! '/' String.until()!
  end
  empty_string! "" new(String)! !

  tmp-str! loaded-files! loaded-count! v64 sizeof(String)! * + String.copy()! !
  loaded-count! _ v64 1 + ^64

  tmp-str!
  file-path! String.addr! v64
  file-path! String.len! v64 # full path len
  tmp-str! String.len! v64 # file name len
  - # dirname len
  new(String)! !

  tmp-str! dirname! String.strcpy()!
end

macro main! do
  1 while _ argc < do
    tmp-str! over nth_arg! strlen()! new(String)! !

    if tmp-str! "-" String.startswith()! do
      tmp-str! String.addr! _ v64 1 + ^64
      tmp-str! String.len! _ v64 1 - ^64
      if tmp-str! "-" String.startswith()! do
        tmp-str! String.addr! _ v64 1 + ^64
        tmp-str! String.len! _ v64 1 - ^64
      end

      if
        tmp-str! "help" String.streq()!
        tmp-str! "h" String.streq()!
      | do
        usage()!
        0 sys_exit! syscall1
      elif
        tmp-str! "load-dir" String.streq()!
        tmp-str! "L" String.streq()!
      | do
        if LOAD_DIRS_CAP! load-dirs-count! == do
          "TODO: write an error for load dir overflow!" eprintln!
          101 sys_exit! syscall1
        end

        1 +
        load-dirs! load-dirs-count! v64 8 * + over ^64
        load-dirs-count! _ v64 1 + ^64
      else
        "TODO: write an error for unknown option!" eprintln!
        101 sys_exit! syscall1
      end
    elif file-path! String.len! v64 0 == do
      tmp-str! file-path! String.copy()! !
    else
      "TODO: write an error for unknown arg!" eprintln!
      101 sys_exit! syscall1
    end
    1 +
  end

  if file-path! String.len! v64 0 == do
    "TODO: write an error for no given file!" eprintln!
    101 sys_exit! syscall1
  elif file-path! ".clq" String.endswith()! 0 == do
    "TODO: write an error for file with unknown extension!" eprintln!
    101 sys_exit! syscall1
  end

  file-path! loaded-files! loaded-count! v64 sizeof(String)! * + String.copy()! !
  loaded-count! _ v64 1 + ^64

  get-out-path()!
  get-dirname()!

  # Open out file for writing
  AT_FDCWD! # dirmode
  out-path! # pathname

  O_WRONLY!
  O_CREAT!  | # flags
  O_TRUNC!  |

  S_IRUSR!
  S_IWUSR! | # mode
  S_IRGRP! | # file perms: -rw-r--r--
  S_IROTH! |

  sys_openat! syscall4
  out-fd! <-> ^64

  file-path! String.addr! v64 open-file()!
  compile-to-arm64-asm()!

  # Close out file
  out-fd! v64 sys_close! syscall1
end

main!

